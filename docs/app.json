[{"name": "app.py", "content": "\n# Import packages from pyshiny express and the python standard library\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nimport pandas as pd\nimport plotly.express as px\nfrom datetime import datetime\nfrom collections import deque\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# If working locally, add the following to requirements.txt\n# faicons\n# shiny\n# shinylive\n\n# --------------------------------------------\n# SET UP THE REACTIVE CONTENT\n# --------------------------------------------\n\n# --------------------------------------------\n# PLANNING: We want to get a fake temperature and \n# Time stamp every N seconds. \n# For now, we'll avoid storage and just \n# Try to get the fake live data working and sketch our app. \n# We can do all that with one reactive calc.\n# Use constants for update interval so it's easy to modify.\n# ---------------------------------------------------------\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\nUPDATE_INTERVAL_SECS: int = 5\n# --------------------------------------------\n\n# Initialize a REACTIVE VALUE with a common data structure\n# The reactive value is used to store state (information)\n# Used by all the display components that show this live data.\n# This reactive value is a wrapper around a DEQUE of readings\n\n# --------------------------------------------\nDEQUE_SIZE: int = 30\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n#---------------------------------------------\n\n# Initialize a REACTIVE CALC that our display components can call\n# to get the latest data and display it.\n# The calculation is invalidated every UPDATE_INTERVAL_SECS\n# to trigger updates.\n\n# It returns everything needed to display the data.\n# Very easy to expand or modify.\n# (I originally looked at REACTIVE POLL, but this seems to work better.)\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic. Get random between -18 and -16 C, rounded to 1 decimal place\n    temp = round(random.uniform(-18, -16), 1)\n\n    # Get a timestamp for \"now\" and use string format strftime() method to format it\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Page Options\n# ------------------------------------------------\n\n# Call the ui.page_opts() function\n# Set title to a string in quotes that will appear at the top\n# Set fillable to True to use the whole page width for the UI\n\nui.page_opts(title=\"Pinkston's PyShiny Project with Live Data\", fillable=True, style=\"background-color: silver\")\n\n# ------------------------------------------------\n# Define the Shiny UI Page layout - Sidebar\n# ------------------------------------------------\n\n# Sidebar is typically used for user interaction/information\n# Note the with statement to create the sidebar followed by a colon\n# Everything in the sidebar is indented consistently\n\nwith ui.sidebar(open=\"open\", bg=\"silver\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n\n    ui.hr()\n    ui.h6(\"Links\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/cintel-05-cintel-fancy\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://github.com/james-0177/cintel-05-cintel/blob/main/dashboard/app.py\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny Express\", href=\"https://shiny.posit.co/py/\", target=\"_blank\",)\n    \n\n#---------------------------------------------------------------------\n# In Shiny Express, everything not in the sidebar is in the main panel\n#---------------------------------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"snowflake\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C ({round(latest_dictionary_entry['temp'] * 9/5 + 32, 1)} F)\"\n\n        \"warmer than usual\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Temperature Readings\")\n        @render.data_frame\n        def display_df():\n            \"\"\"Get the latest data and return a dataframe with current data\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)\n            return render.DataGrid(df, width=\"100%\")\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Temperature Distribution\")\n        @render_plotly\n        def display_plot():\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            if not df.empty:\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n                fig = px.scatter(df,\n                                 x=\"timestamp\",\n                                 y=\"temp\",\n                                 title=\"Temperature Readings with Regression Line\",\n                                 labels={\"temp\": \"Temperature (C)\", \"timestamp\": \"Time\"},\n                                 color_discrete_sequence=[\"dimgrey\"])\n                x_vals = range(len(df))\n                y_vals = df[\"temp\"]\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n                fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n                fig.update_layout(xaxis_title=\"Time\", yaxis_title=\"Temperature (C)\")\n            return fig\n", "type": "text"}]